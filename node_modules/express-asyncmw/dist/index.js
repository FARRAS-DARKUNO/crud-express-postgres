"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorAsyncMw = exports.asyncMw = void 0;
const promiseStandardMw = (fn, req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch((err) => {
        if (typeof next === 'function') {
            next(err);
        }
    });
};
const promiseErrorMw = (fn, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
err, req, res, next) => {
    Promise.resolve(fn(err, req, res, next)).catch((error) => {
        if (typeof next === 'function') {
            next(error);
        }
    });
};
const standardMw = (fn) => (req, res, next) => promiseStandardMw(fn, req, res, next);
const withErrorMw = (fn) => (err, req, res, next) => promiseErrorMw(fn, err, req, res, next);
const mwWrapper = (mw) => {
    if (typeof mw !== 'function')
        throw new Error('Middleware should be a function');
    if (mw.length <= 3)
        return standardMw(mw);
    return withErrorMw(mw);
};
const asyncMw = (...mws) => {
    // Change to array if the request is not an array
    if (!Array.isArray(mws))
        mws = [mws]; // eslint-disable-line no-param-reassign
    return mws.map(mwWrapper);
};
exports.asyncMw = asyncMw;
const errorAsyncMw = (...mws) => {
    // Change to array if the request is not an array
    if (!Array.isArray(mws))
        mws = [mws]; // eslint-disable-line no-param-reassign
    return mws.map(mwWrapper);
};
exports.errorAsyncMw = errorAsyncMw;
exports.default = exports.asyncMw;
